{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.6.0\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from \"@iobroker/adapter-core\";\nimport { findByIds } from \"usb\";\nimport { IUsbDevice } from \"./IUsbDevice\";\nimport { MockUsbDevice } from \"./MockUsbDevice\";\n\n// These constants specify the anyma uDMX device\nconst VENDOR_ID = 0x16c0;\nconst PRODUCT_ID = 0x5dc;\n\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\n\nclass Udmx extends utils.Adapter {\n    private dmxBuffer!: Buffer;\n    private udmxDevice?: IUsbDevice;\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: \"udmx\",\n        });\n        this.on(\"ready\", this.onReady.bind(this));\n        this.on(\"stateChange\", this.onStateChange.bind(this));\n        // this.on(\"objectChange\", this.onObjectChange.bind(this));\n        // this.on(\"message\", this.onMessage.bind(this));\n        this.on(\"unload\", this.onUnload.bind(this));\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        const addressCount = this.config.addressCount;\n        if (!addressCount) {\n            this.log.warn(\"No addresses configured, nothing to do in this adapter\");\n            return;\n        }\n\n        this.dmxBuffer = Buffer.alloc(addressCount);\n\n        if (this.config.mockDevice) {\n            this.log.warn(\"Using a mock USB device for testing!\");\n            this.udmxDevice = new MockUsbDevice(this.log);\n        } else {\n            const device = findByIds(VENDOR_ID, PRODUCT_ID);\n            if (!device) {\n                this.log.error(\"Couldn't find an Anyma USB adapter, not doing anything!\");\n                return;\n            }\n\n            device.open();\n\n            this.udmxDevice = device;\n        }\n\n        const allStates = await this.getStatesAsync(\"*\");\n\n        for (let i = 1; i <= addressCount; i++) {\n            const id = \"\" + i;\n            const obj = {\n                type: \"state\",\n                common: {\n                    name: \"Address \" + i,\n                    read: true,\n                    write: true,\n                    type: \"number\",\n                    role: \"level\",\n                    min: 0,\n                    max: 255,\n                },\n                native: {},\n            } as const;\n            this.setObjectNotExistsAsync(id, obj);\n            const existingValue = allStates[this.namespace + \".\" + id];\n            if (existingValue && typeof existingValue.val === \"number\") {\n                this.dmxBuffer.writeUInt8(existingValue.val, i - 1);\n            } else {\n                this.setStateAck(id, 0);\n            }\n        }\n\n        this.subscribeStates(\"*\");\n        this.sendDmxBuffer();\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            this.udmxDevice?.close();\n            // Here you must clear all timeouts or intervals that may still be active\n            // clearTimeout(timeout1);\n            // clearTimeout(timeout2);\n            // ...\n            // clearInterval(interval1);\n\n            callback();\n        } catch (e) {\n            callback();\n        }\n    }\n\n    /**\n     * Is called if a subscribed state changes\n     */\n    private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n        // Warning: state can be null if it was deleted!\n        if (!id || !state || state.ack) {\n            return;\n        }\n\n        this.log.debug(\"stateChange \" + id + \" \" + JSON.stringify(state));\n        const index = parseInt(id.replace(this.namespace + \".\", \"\")) - 1;\n        const value = typeof state.val === \"number\" ? state.val : parseInt(state.val as string);\n        this.dmxBuffer.writeUInt8(value, index);\n        this.sendDmxBuffer();\n\n        this.setStateAck(id, value);\n    }\n\n    private setStateAck(id: string, value: number) {\n        this.setState(id, { val: value, ack: true });\n    }\n\n    private sendDmxBuffer() {\n        this.udmxDevice?.controlTransfer(0x40, 0x0002, this.dmxBuffer.length, 0, this.dmxBuffer, (error) => {\n            if (error) {\n                this.log.error(\"USB error: \" + error);\n            }\n        });\n    }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Udmx(options);\n} else {\n    // otherwise start the instance directly\n    (() => new Udmx())();\n}\n"],
  "mappings": "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",
  "names": []
}
